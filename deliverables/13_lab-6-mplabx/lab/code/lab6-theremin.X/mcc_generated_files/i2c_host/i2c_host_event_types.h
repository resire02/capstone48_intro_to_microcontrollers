/**
 * Header file generated by I2C host driver.
 *
 * @file i2c_host_event_types.h
 *
 * @ingroup i2c_host_interrupt
 *
 * @brief This header file contains helper structures for the implementation of the I2C host driver.
 *
 * @version TWI0 Driver Version 2.1.4
 * 
 * @version TWI0 Package Version 8.2.0
 */

/*
© [2025] Microchip Technology Inc. and its subsidiaries.

    Subject to your compliance with these terms, you may use Microchip 
    software and any derivatives exclusively with Microchip products. 
    You are responsible for complying with 3rd party license terms  
    applicable to your use of 3rd party software (including open source  
    software) that may accompany Microchip software. SOFTWARE IS ?AS IS.? 
    NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS 
    SOFTWARE, INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT,  
    MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT 
    WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, 
    INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY 
    KIND WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF 
    MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE 
    FORESEEABLE. TO THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP?S 
    TOTAL LIABILITY ON ALL CLAIMS RELATED TO THE SOFTWARE WILL NOT 
    EXCEED AMOUNT OF FEES, IF ANY, YOU PAID DIRECTLY TO MICROCHIP FOR 
    THIS SOFTWARE.
*/

#ifndef I2C_HOST_EVENT_TYPES_H
#define	I2C_HOST_EVENT_TYPES_H

#include "i2c_host_types.h"
#ifndef __XC8
#include <stddef.h>
#endif

#define I2C_EVENTS  (9)

/**
 * @ingroup i2c_host_interrupt
 * @typedef enum i2c_event_states_t
 * @brief Enumeration representing the states of host events.
 */
typedef enum
{
    I2C_STATE_IDLE = 0, /**< State indicates that the I2C bus is in an idle state */
    I2C_STATE_SEND_RD_ADDR, /**< State indicates the transmission of the address for a read operation */
    I2C_STATE_SEND_WR_ADDR, /**< State indicates the transmission of the address for a write operation*/
    I2C_STATE_TX, /**< State indicates the data transmission */
    I2C_STATE_RX, /**< State indicates the data reception */
    I2C_STATE_NACK, /**< State indicates that a negative acknowledgment was received from the I2C client */
    I2C_STATE_ERROR, /**< State indicates an error */
    I2C_STATE_STOP, /**< State indicates stop operation */
    I2C_STATE_RESET  /**< State indicates the reset event */
} i2c_event_states_t;

/**
 * @ingroup i2c_host_interrupt
 * @typedef struct i2c_event_status_t
 * @brief Structure that defines the communication parameters for an I2C host.
 */
typedef struct
{
    bool busy; /**< A flag that signifies the host is currently busy */
    uint16_t address; /**< I2C client address */
    uint8_t *writePtr; /**< Pointer to the buffer used for transmission */
    size_t writeLength; /**< The number of bytes to be written or sent to the client */
    uint8_t *readPtr; /**< Pointer to the buffer for received data */
    size_t readLength; /**< Number of bytes to be read from the client */
    bool switchToRead; /**< Boolean flag to indicate switching to read mode */
    i2c_host_error_t errorState; /**< An instance of i2c_host_error_t */ 
    i2c_event_states_t state; /**< An instance of i2c_host_event_states_t */
} i2c_event_status_t;

typedef i2c_event_states_t (*twi0eventHandler)(void);

extern volatile i2c_event_status_t twi0_Status;
extern const twi0eventHandler twi0_eventTable[I2C_EVENTS];

#endif /* I2C_HOST_EVENT_TYPES_H */
